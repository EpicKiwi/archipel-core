---
stages:
    - builds
    - unit_test
    - functional_test
    - code_quality_test
    - publish

image: buildpack-deps:buster

variables:
  GIT_SUBMODULE_STRATEGY: recursive

build-posix-debug:
    stage: builds
    when: always
    script:
        - make werror=yes verbose=yes

build-posix-release:
    stage: builds
    when: always
    script:
        - make -j4 type=release optimize=yes werror=yes verbose=yes

build-stm32-debug:
    stage: builds
    when: always
    script:
        - apt-get update
        - apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi unzip -y
        - wget -O freertos.zip https://downloads.sourceforge.net/project/freertos/FreeRTOS/V9.0.0/FreeRTOSv9.0.0.zip
        - unzip -d freertos freertos.zip
        - make stm32 werror=yes verbose=yes FREERTOS_PREFIX=freertos/FreeRTOSv9.0.0

build-stm32-release:
    stage: builds
    when: always
    script:
        - apt-get update
        - apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi unzip -y
        - wget -O freertos.zip https://downloads.sourceforge.net/project/freertos/FreeRTOS/V9.0.0/FreeRTOSv9.0.0.zip
        - unzip -d freertos freertos.zip
        - make stm32 -j4 type=release optimize=yes werror=yes verbose=yes FREERTOS_PREFIX=freertos/FreeRTOSv9.0.0

build-clang-posix-debug:
    stage: builds
    when: always
    script:
        - apt-get update
        - apt-get install clang -y
        - make werror=yes verbose=yes TOOLCHAIN=clang

build-clang-posix-release:
    stage: builds
    when: always
    script:
        - apt-get update
        - apt-get install clang -y
        - make type=release optimize=yes werror=yes verbose=yes TOOLCHAIN=clang

build-clang-stm32-debug:
    stage: builds
    when: always
    script:
        - apt-get update
        - apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi unzip clang -y
        - wget -O freertos.zip https://downloads.sourceforge.net/project/freertos/FreeRTOS/V9.0.0/FreeRTOSv9.0.0.zip
        - unzip -d freertos freertos.zip
        - make stm32 verbose=yes FREERTOS_PREFIX=freertos/FreeRTOSv9.0.0 TOOLCHAIN=clang CLANG_SYSROOT=/usr/lib/arm-none-eabi/

build-clang-stm32-release:
    stage: builds
    when: always
    script:
        - apt-get update
        - apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi unzip clang -y
        - wget -O freertos.zip https://downloads.sourceforge.net/project/freertos/FreeRTOS/V9.0.0/FreeRTOSv9.0.0.zip
        - unzip -d freertos freertos.zip
        - make stm32 type=release optimize=yes verbose=yes FREERTOS_PREFIX=freertos/FreeRTOSv9.0.0 TOOLCHAIN=clang CLANG_SYSROOT=/usr/lib/arm-none-eabi/

unit-test-posix-debug:
    stage: unit_test
    when: always
    script:
        - timeout 60 make run-unittest-posix

unit-test-posix-release:
    stage: unit_test
    when: always
    script:
        - timeout 60 make type=release run-unittest-posix

unit-test-stm32:
    stage: unit_test
    when: always
    tags: ["stm32", "shell"]
    script:
        - bash .gitlab-ci-stm32.sh unittest

integration-test-posix:
    stage: functional_test
    when: always
    image: python:3.7
    script:
        - make REMOTE_CONFIGURATION=True
        - make run-posix &
        - make virtualenv
        - source .venv/bin/activate && pytest test/integration

integration-test-stm32:
    stage: functional_test
    when: always
    tags: ["stm32", "shell"]
    script:
        - export REMOTE_CONFIGURATION=True
        - bash .gitlab-ci-stm32.sh integrationtest

aap-test:
    stage: functional_test
    when: always
    image: python:3.7
    script:
        - make
        - make virtualenv
        - build/posix/ud3tn &
        - source .venv/bin/activate && python tools/aap/aap_test.py

ion-bpv6-interoperability-test:
    stage: functional_test
    when: always
    script:
        - bash test/ion_interopability/minimal_forwarding_test/run.sh 6

ion-bpv7-interoperability-test:
    stage: functional_test
    when: always
    script:
        - bash test/ion_interopability/minimal_forwarding_test/run.sh 7

mtcp-test:
    stage: functional_test
    when: always
    image: python:3.7
    script:
        - make REMOTE_CONFIGURATION=True
        - make run-posix &
        - make virtualenv
        - source .venv/bin/activate && python tools/cla/mtcp_test.py -t mtcp --payload TESTPAYLOAD &
        - source .venv/bin/activate && timeout 5 python tools/cla/mtcp_sink.py --count 1 --verify-pl TESTPAYLOAD

fragment-reassembly-test:
    stage: functional_test
    when: always
    image: python:3.7
    script:
        - make
        - make virtualenv
        - build/posix/ud3tn -c "mtcp:*,4222" -e "dtn://ud3tn1.dtn" -s ud3tn1.socket &
        - build/posix/ud3tn -c "mtcp:*,4223" -e "dtn://ud3tn2.dtn" -s ud3tn2.socket &
        - source .venv/bin/activate && python tools/aap/aap_config.py --socket ud3tn1.socket --schedule 2 1 140 --schedule 4 1 140 dtn://ud3tn2.dtn mtcp:localhost:4223
        - source .venv/bin/activate && python tools/aap/aap_send.py --socket ud3tn1.socket dtn://ud3tn2.dtn/sink THISISAVERYLONGBUNDLEPAYLOADWHICHWILLBEFRAGMENTED
        - source .venv/bin/activate && timeout 5 python tools/aap/aap_receive.py --socket ud3tn2.socket --agentid sink --count 1 --verify-pl THISISAVERYLONGBUNDLEPAYLOADWHICHWILLBEFRAGMENTED

stylecheck:
    stage: code_quality_test
    when: always
    image: perl:5
    script:
        - make check-style

python-stylecheck:
    stage: code_quality_test
    when: always
    image: python:3.7
    script:
        - make virtualenv
        - source .venv/bin/activate && python -m flake8 pyd3tn python-ud3tn-utils test/integration tools/aap tools/cla --max-complexity=12

clang-tidy-posix:
    stage: code_quality_test
    when: always
    script:
        - apt-get update
        - apt-get install clang clang-tidy -y
        - make clang-tidy-posix

publish-docker-image:
    stage: publish
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[0-9]+(.[0-9]+)+$/'
          when: always
    image:
        # See https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    variables:
        CI_REGISTRY_IMAGE: registry.gitlab.com/d3tn/ud3tn-docker-images/ud3tn
    script:
        # find out if the docker image *also* should be tagged with "latest"
        - |
          # Download all existing ud3tn docker image tags from the docker image registry
          wget -q "https://gitlab.com/api/v4/projects/23559871/registry/repositories/1616836/tags" -O tags.json

          # Remove some json symbols, introduce line feeds for better filtering
          sed -i -E 's/\]//g; s/\[//g; s/\},?/\n/g' tags.json

          # Remove everything except the docker image tags (latest, v0.9.0, ...)
          sed -i -E 's/(^.*"name":")(.*)(","path.*$)/\2/' tags.json

          # Append the $CI_COMMIT_TAG to the list of tags
          echo "$CI_COMMIT_TAG" >> tags.json

          # Get the numerically highest *version* tag
          highest_version=$(grep -E "v.*" tags.json | sort -rV | head -n1)

          # Build the string $IMAGES that determines what image_name:image_tag the resulting docker image will have
          TAGS="$CI_COMMIT_TAG"
          if [ "$highest_version" = "$CI_COMMIT_TAG" ]; then TAGS="$TAGS latest"; fi
          for TAG in $TAGS; do
            IMAGES="${IMAGES} --destination $CI_REGISTRY_IMAGE:$TAG";
          done;
        - echo $IMAGES
        # Prepare docker image registry access credentials
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$UD3TN_CI_DOCKER_DEPLOY_USER\",\"password\":\"$UD3TN_CI_DOCKER_DEPLOY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        # Build and push the docker image
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfiles/ud3tn --build-arg UD3TN_VERSION=$CI_COMMIT_TAG $IMAGES
